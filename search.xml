<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>汇编语言-新文章</title>
    <url>/2020/12/28/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E6%96%B0%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Metasploit命令</title>
    <url>/2019/03/29/Metasploit%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>为了方便自己后期的学习，我把metasploit的帮助信息简单翻译了一下，包括命令和一些用法描述。</p>
<a id="more"></a>

<h1 id="核心命令"><a href="#核心命令" class="headerlink" title="核心命令"></a>核心命令</h1><pre><code>命令          描述
-------       -----------
?             帮助菜单
banner        在命令行里显示一个好看的metasploit图案（一个很有趣的命令^0^）
cd            更改当前工作目录
color         启用或禁用颜色输出
connect       连接到一个主机
exit          退出msfconsole
get           获得一个上下文特定变量的值
getg          获得一个全局变量的值
grep          从另一个命令的输出中查找符合条件的行
help          帮助菜单
history       显示历史命令
load          加载框架插件
quit          退出msfconsole（有提示Y/N）
repeat        重复一个命令列表
route         通过会话路由流量
save          保存活动数据
sessions      转储会话列表并显示有关会话的信息
set           设置一个上下文特定变量的值
setg          设置一个全局变量的值
sleep         在指定的秒数内不执行任何操作
spool         将控制台输出写入某个文件
threads       查看和操纵后台线程
unload        卸载框架插件
unset         取消设置一个或多个上下文特定变量的值
unsetg        取消设置一个或多个全局变量的值
version       显示框架和控制台库版本号</code></pre><h1 id="模块命令"><a href="#模块命令" class="headerlink" title="模块命令"></a>模块命令</h1><pre><code>命令             描述
-------       -----------
advanced      显示一个或多个模块的高级选项
back          从当前上下文后退
info          显示一个或多个模块的信息
loadpath      从路径搜索模块并加载
options       显示一个或多个模块的全局选项
popm          将最新模块弹出堆栈并使其激活
previous      将先前加载的模块设置为当前模块
pushm         将活动模块或模块列表推入模块堆栈
reload_all    从所有定义的模块路径重新加载所有模块
search        搜索模块名称和描述
show          显示给定类型的模块，或者所有模块
use           按名称选择模块</code></pre><h1 id="作业命令"><a href="#作业命令" class="headerlink" title="作业命令"></a>作业命令</h1><pre><code>命令          描述
-------       -----------
handler       启动有效负载处理程序作为作业
jobs          显示和管理作业
kill          杀死作业
rename_job    重命名作业</code></pre><h1 id="资源脚本命令"><a href="#资源脚本命令" class="headerlink" title="资源脚本命令"></a>资源脚本命令</h1><pre><code>命令          描述
-------       -----------
makerc        将启动之后输入的命令保存到文件中
resource      运行文件中的命令</code></pre><h1 id="数据库后端命令"><a href="#数据库后端命令" class="headerlink" title="数据库后端命令"></a>数据库后端命令</h1><pre><code>命令              描述
-------           -----------
analyze           分析有关特定地址或地址范围的数据库信息
db_connect        连接到现有的数据服务
db_disconnect     断开当前数据服务
db_export         导出包含数据库内容的文件
db_import         导入扫描结果文件（将自动检测文件类型）
db_nmap           执行nmap并自动记录输出
db_rebuild_cache  重建数据库存储的模块缓存
db_remove         删除保存的数据服务条目
db_save           将当前数据服务连接保存为默认值，以便在启动时重新连接
db_status         显示当前数据服务状态
hosts             列出数据库中的所有主机
loot              列出数据库中的所有Loot(战利品)
notes             列出数据库中的所有注释
services          列出数据库中的所有服务
vulns             列出数据库中的所有漏洞
workspace         在数据库工作区之间切换</code></pre><h1 id="凭证后端命令"><a href="#凭证后端命令" class="headerlink" title="凭证后端命令"></a>凭证后端命令</h1><pre><code>命令          描述
-------       -----------
creds         列出数据库中的所有证书</code></pre><h1 id="开发人员命令"><a href="#开发人员命令" class="headerlink" title="开发人员命令"></a>开发人员命令</h1><pre><code>命令          描述
-------       -----------
edit          使用首选的编辑器编辑当前模块或文件
irb           在当前上下文中打开一个交互式Ruby Shell
log           如果可以，将framework.log显示到页面末尾
pry           在当前模块或框架上打开Pry调试器
reload_lib    从指定路径重新加载Ruby库文件</code></pre><h1 id="msfconsole"><a href="#msfconsole" class="headerlink" title="msfconsole"></a>msfconsole</h1><p><strong>msfconsole</strong>是Metasploit框架的主要接口。使用者可以通过这个控制台高效的使用MSF中的各种功能。<br>可以在终端或命令行界面直接输入<code>msfconsole</code>启动。</p>
<h2 id="范围和列表"><a href="#范围和列表" class="headerlink" title="范围和列表"></a>范围和列表</h2><p>上面列出的许多命令和选项都可以使用范围，所以不必手动列出每个需要的事物。所有范围均包括在内。</p>
<h3 id="ID范围"><a href="#ID范围" class="headerlink" title="ID范围"></a>ID范围</h3><p>带有ID列表的命令可以使用范围来提供帮助。各个ID必须以<code>,</code>分隔（不允许有空格），<br>范围可以用<code>-</code>或<code>..</code>表示。</p>
<h3 id="IP范围"><a href="#IP范围" class="headerlink" title="IP范围"></a>IP范围</h3><p>这里有多种方法可以用来指定能混合在一起的IP地址范围：</p>
<ul>
<li>第一种方法是一个IP列表，这些IP仅由<code>&#39; &#39;</code>（ASCII空格）分隔，并带有可选的<code>,</code>。</li>
<li>第二种方式是用两个完整的IP地址表示范围，格式为<em>“开始地址-结束地址”</em>，例如<code>127.0.1.44-127.0.2.33</code>。</li>
<li>也可以使用CIDR规范，但是，与RFC相反，必须将整个地址提供给Metasploit，例如127.0.0.0/8，而不是127/8。</li>
<li>此外，可以将网络掩码与域名一起使用以动态解析要定位的块。</li>
</ul>
<p>所有这些方法都适用于IPv4和IPv6地址。也可以根据<a href="https://nmap.org/book/man-target-specification.html" target="_blank" rel="noopener">NMAP目标规范</a>用特殊的八位位组范围指定IPv4地址。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>终止第一个会话：</p>
<pre><code>sessions -k 1</code></pre><p>停止一些正在运行的作业：</p>
<pre><code>jobs -k 2-6,7,8,11..15</code></pre><p>检查一组IP地址：</p>
<pre><code>check 127.168.0.0/16, 127.0.0-2.1-4,15 127.0.0.255</code></pre><p>定位一组IPv6主机：</p>
<pre><code>set RHOSTS fe80::3990:0000/110, ::1-::f0f0</code></pre><p>定位来自解析域名的块：</p>
<pre><code>set RHOSTS www.example.test/24</code></pre><blockquote>
<p>翻译：Boringboys<br>原文链接：<a href="https://www.boringboys.top/2019/03/29/Metasploit命令/">https://www.boringboys.top/2019/03/29/Metasploit命令/</a><br>版权声明：本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">BY-NC-SA</a>协议授权，转载请遵守此协议</p>
</blockquote>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>工具</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Nessus在Windows上的安装</title>
    <url>/2019/04/23/Nessus%E5%9C%A8Windows%E4%B8%8A%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Nessus"><a href="#Nessus" class="headerlink" title="Nessus"></a>Nessus</h2><p><a href="https://baike.baidu.com/item/Nessus/10718713" target="_blank" rel="noopener">Nessus</a> 是目前全世界最多人使用的系统漏洞扫描与分析软件。总共有超过75,000个机构使用Nessus 作为扫描该机构电脑系统的软件。<br>该工具提供完整的电脑漏洞扫描服务，并及时更新其漏洞数据库。</p>
<a id="more"></a>

<p>Nessus不同于传统的漏洞扫描工具，它可以同时在本机或远端上遥控，进行系统的漏洞分析扫描。</p>
<h2 id="获取安装包"><a href="#获取安装包" class="headerlink" title="获取安装包"></a>获取安装包</h2><p>Nessus的下载地址:<a href="https://www.tenable.com/downloads/nessus" target="_blank" rel="noopener">https://www.tenable.com/downloads/nessus</a><br>点击此链接在浏览器打开如下所示的界面：</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/download_page.png" width="95%">

<p>然后选择要下载的版本，这里我选择的是Nessus-8.3.1-x64.msi，即Windows版的安装包；</p>
<h2 id="获取激活码"><a href="#获取激活码" class="headerlink" title="获取激活码"></a>获取激活码</h2><p>在使用Nessus之前，必须先激活服务才可以使用，激活服务的激活码可以在官网获取；</p>
<p>（1）首先在刚才的下载界面，可以看到一个“Get Activation Code”按钮，如下图所示，点击它即可前往获取激活码；</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/get_code.png" width="95%">

<p>（2）然后会让你选择获取哪种激活码，如下图所示：  </p>
<ul>
<li>一种是Professional版的，即专业版，需要付费获得激活码；  </li>
<li>另外一种是Home版的，即免费版；<br>这里我选择了Home版，点击“Register Now”，前往注册界面；</li>
</ul>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/chose_free.png" width="95%">

<p>（3）在注册界面填写信息以及邮箱，然后点击“Register”按钮，如下图；</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/register.png" width="95%">

<p>（4）当显示如下所示的“Thank You for Registing …”页面时，说明你已经成功获得激活码，激活码以邮件形式发送到了你所填写的邮箱；</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/thanks_page.png" width="95%">

<h2 id="安装Nessus"><a href="#安装Nessus" class="headerlink" title="安装Nessus"></a>安装Nessus</h2><p>（1）点击前面下载的xxx.msi安装包，安装Nessus；</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/install.png" width="95%">

<p>按照安装导向成功安装Nessus后，会自动在浏览器打开一个如下图所示的页面，如果没有可以自己在浏览器输入“<a href="https://localhost:8834”打开；">https://localhost:8834”打开；</a></p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/create_account.png" width="95%">

<p>如果输入链接后无法访问，可能是Nessus服务没有运行，前往Nessus的安装目录点击执行“nessus-service.exe”即可，如图双击“nessus-service.exe”启动Nessus服务，<br>双击“Nessus Web Client”可以打开网页版客户端，即“http:localhost:8834”；</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/nessus.png" width="95%">

<p>（2）在打开的“Create an account”页面，输入用户名和密码创建一个账号，以后再次打开此页面使用Nessus时，需要使用这里设置的用户名和密码登录；<br>（3）点击“Continue”后，会出现一个界面让你输入激活码，将前面获得的激活码输入然后继续；<br>（4）然后就是如下图所示的初始化界面了，这一步会下载并安装一些插件，时间会有点久，但没有任何操作，等它完成就可以了；</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/nessus_initializing.png" width="95%">

<p>（5）完成之后，显示下面的界面，表示安装成功，你可以创建自己的扫描任务并执行了。</p>
<img src="https://boringboys-1254394685.cos.ap-shanghai.myqcloud.com/img/Nessus_install/success.png" width="95%">


<blockquote>
<p>作者：Boringboys<br>原文链接：<a href="https://www.boringboys.top/2019/04/23/Nessus在Windows上的安装/">https://www.boringboys.top/2019/04/23/Nessus在Windows上的安装/</a><br>版权声明：本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">BY-NC-SA</a>协议授权，转载请遵守此协议</p>
</blockquote>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学 Diffie-Hellman密钥交换协议</title>
    <url>/2018/12/04/%E5%AF%86%E7%A0%81%E5%AD%A6Diffie-Hellman%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>Diffie-Hellman密钥交换协议</strong>（Diffie-Hellman key exchange agreement）简称“D-H<strong>协议</strong>”，是1976年 Whitfield Diffie 和 Martin Hellman 合作发明的安全协议，它可以让双方在完全没有对方任何预先信息的条件下通过不安全信道创建起一个密钥。这个密钥可以在后续的通信中作为对称密钥来加密通信内容。</p>
<a id="more"></a>

<h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><p>（1）通信双方 Alice 和 Bob 先确定<em>两个大素数</em> p 和 q ，这两个数不需要保密，因此通信双方可以通过不安全信道协商并确定这两个数；</p>
<p>（2）Alice 选择一个大的<em>随机数</em> <code>r1</code> 并计算：<code>A=q^r1 (mod p)</code>；</p>
<p>（3）Alice 将 <code>A</code> 发送给 Bob；</p>
<p>（4）Bob 选择另外一个大的<em>随机数</em> <code>r2</code> 并计算：<code>B=q^r2 (mod p)</code>；</p>
<p>（5）Bob 将 <code>B</code> 发送给 Alice；</p>
<p>（6）Alice 计算密钥：<code>k1=B^r1 (mod p)</code>；</p>
<p>（7）Bob 计算密钥：<code>k2=A^r2 (mod p)</code></p>
<p>ps:最后，Alice 和 Bob 计算得到的 <code>k1=k2</code>，即得到的密钥</p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>（1）假设 Alice 和 Bob 选取的 <code>p=11 ， q=5</code>；</p>
<p>（2）Alice 选择的随机数取 <code>r1=3</code>，则 <code>A=5^3 (mod 11)=4</code>；</p>
<p>（3）Alice 将 <code>A=4</code> 发送给 Bob；</p>
<p>（4）Bob 选择的随机数取 <code>r2=6</code>，则 <code>B=5^6 (mod 11)=5</code>；</p>
<p>（5）Bob 将 <code>B=5</code> 发送给 Alice；</p>
<p>（6）Alice 计算：<code>k1=5^3 (mod 11)=4</code>；</p>
<p>（7）Bob 计算：<code>k2=4^6 (mod 11)=4</code>；</p>
<p>（8）交换得到的密钥：<code>k1=k2=4</code></p>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p><em>D-H协议的安全性在于，在有限域中计算离散对数远远难于在同一个域中计算指数。</em></p>
<p>从上面给出的例子解释，就是当 Alice 知道 r1=3，以及 p 和 q 的情况下可以十分容易的计算得到 A；<br>而第三方在只知道 p，q 和 A 的情况下却很难计算得到 Alice 取得随机数 r1，所以无法使用 Bob 通过公共信道发送的 B 计算得到密钥 k；<br>对于 Bob 取的随机数 r2，与对 Alice 的分析一样，第三方同样难以通过计算得到，也就难以通过 Alice 发送的 A 计算出密钥。</p>
<h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><p>D-H协议也存在缺陷，即容易受到<strong>中间人攻击</strong> ( <strong>Man-in-the-Middle Attack</strong> ，简称 <strong>“MITM攻击”</strong> ) ，就是通过拦截正常的网络通信数据，并进行数据篡改和嗅探，而通信双方却毫不知情。</p>
<p>中间人攻击的过程如下：</p>
<p>（1）第一步和上面所说的一样，通信双方 Alice 和 Bob 先确定两个大素数 <code>p</code> 和 <code>q</code> ，这两个数不需要保密，因此通信双方可以通过不安全信道协商并确定这两个数；<br>设 <code>p=11 ，q=5</code>；</p>
<p>（2）窥探者 Eve 监听他们两个的会话，并得到了 <code>p</code> 和 <code>q</code> 的值；</p>
<p>（3）Alice、Bob、Eve 同时选择随机数：<br>设 Alice 选择的还是 <code>r1=3</code> ，Bob 选择的是 <code>r2=6</code>，Eve 选择两个随机数 <code>r1&#39;=8，r2&#39;=9</code>；</p>
<p>（4）Alice、Bob、Eve 分别计算 <code>q^r (mod p)</code>：<br>Alice 计算得 <code>A=4</code> ，Bob 计算得 <code>B=5</code> ，Eve 计算得 <code>A&#39;=13,B&#39;=12</code></p>
<p>（5）然后按照协议 Alice 将自己计算的 <code>A</code> 发送给 Bob，此时 Eve 截获这个 <code>A</code>，并将自己计算得到的 <code>A&#39;</code> 发送给 Bob，Bob 对此过程并不知情；</p>
<p>（6）同样 Eve 也截获了 Bob 发送给 Alice 的 <code>B</code>，并将 <code>B&#39;</code> 发送给 Alice，Alice 同样对此过程毫不知情；</p>
<p>（7）此时 Eve 可以根据截获的 <code>A</code> 、<code>B</code> 分别计算出 <em>自己和 Alice 通信的密钥</em> 以及 <em>自己和Bob通信的密钥</em>，分别与 Alice 、Bob 共享不同的密钥。</p>
<p>这样一来，Eve 就可以分别与 Alice 和 Bob 通信，而 Alice 和 Bob 仍认为和自己通信的是对方，对第三方并不知情。</p>
<blockquote>
<p>作者：Boringboys<br>原文链接：<a href="https://www.boringboys.top/2018/12/04/密码学Diffie-Hellman密钥交换协议/">https://www.boringboys.top/2018/12/04/密码学Diffie-Hellman密钥交换协议/</a><br>版权声明：本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">BY-NC-SA</a>协议授权，转载请遵守此协议</p>
</blockquote>
]]></content>
      <categories>
        <category>密码学</category>
      </categories>
      <tags>
        <tag>安全</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2019/05/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>正则表达式</strong>，又称规则表达式。（英语：Regular Expression，代码中简写为regex、regexp或RE），计算机科学的一个概念。<br>正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。</p>
<p>正则表达式由一些普通字符和一些元字符（metacharacters）组成。普通字符包括大小写的字母和数字，而元字符则具有特殊的含义。</p>
<a id="more"></a>

<p>下表列出了所有的元字符和对它们的描述。</p>
<table>
 <tr>
  <th>字符</th><th>描述</th> 
</tr>
 <tr>
  <td>\</td><td>将下一个字符标记为特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。</td> 
</tr>
 <tr>
  <td>^</td><td>匹配输入字符串的开始位置。</td> 
</tr>
 <tr>
  <td>$</td><td>匹配输入字符串的结束位置。</td> 
</tr>
 <tr>
  <td>*</td><td>匹配前面的子表达式零次或多次。</td> 
</tr>
 <tr>
  <td>+</td><td>匹配前面的子表达式一次或多次。</td> 
</tr>
 <tr>
  <td>?</td><td>匹配前面的子表达式零次或一次。</td> 
</tr>
 <tr>
  <td>{n}</td><td>n 是一个非负整数。匹配确定的 n 次。</td> 
</tr>
 <tr>
  <td>{n,}</td><td>n 是一个非负整数。至少匹配n 次。</td> 
</tr>
 <tr>
  <td>{n,m}</td><td>m和n均为非负整数，其中n<=m。最少匹配n次且最多匹配m次。</td> 
</tr>
 <tr>
  <td>?</td><td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少地匹配所搜索的字符串，而默认的贪婪模式则尽可能多地匹配所搜索的字符串。</td> 
</tr>
 <tr>
  <td>.</td><td>匹配除换行符（\n、\r）之外的任何单个字符。</td> 
</tr>
 <tr>
  <td>(pattern)</td><td>匹配pattern并获取这一匹配。</td> 
</tr>
 <tr>
  <td>(?:pattern)</td><td>非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分时很有用。</td> 
</tr>
 <tr>
  <td>(?=pattern)</td><td>非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。</td> 
</tr>
 <tr>
  <td>(?!pattern)</td><td>非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。</td> 
</tr>
 <tr>
  <td>(?<=pattern)</td><td>非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。</td> 
</tr>
 <tr>
  <td>(?<<e>!patte_n)</td><td>非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。</td> 
</tr>
 <tr>
  <td>x|y</td><td>匹配x或y。</td> 
</tr>
 <tr>
  <td>[xyz]</td><td>字符集合。匹配所包含的任意一个字符。</td> 
</tr>
 <tr>
  <td>[^xyz]</td><td>负值字符集合。匹配未包含的任意字符。</td> 
</tr>
<tr>
  <td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符。</td> 
</tr>
<tr>
  <td>[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。</td> 
</tr>
<tr>
  <td>\b</td><td>匹配一个单词的边界，也就是指单词和空格间的位置（即正则表达式的“匹配”有两种概念，一种是匹配字符，一种是匹配位置，这里的\b就是匹配位置的）。</td> 
</tr>
<tr>
  <td>\B</td><td>匹配非单词边界。</td> 
</tr>
<tr>
  <td>\cx</td><td>匹配由x指明的控制字符。</td> 
</tr>
<tr>
  <td>\d</td><td>匹配一个数字字符。等价于[0-9]。grep 要加上-P，perl正则支持。</td> 
</tr>
<tr>
  <td>\D</td><td>匹配一个非数字字符。等价于[^0-9]。grep要加上-P，perl正则支持。</td> 
</tr>
<tr>
  <td>\f</td><td>匹配一个换页符。等价于\x0c和\cL。</td> 
</tr>
<tr>
  <td>\n</td><td>匹配一个换行符。等价于\x0a和\cJ。</td> 
</tr>
<tr>
  <td>\r</td><td>匹配一个回车符。等价于\x0d和\cM。</td> 
</tr>
<tr>
  <td>\s</td><td>匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td> 
</tr>
<tr>
  <td>\S</td><td>匹配任何可见字符。等价于[^ \f\n\r\t\v]。</td> 
</tr>
<tr>
  <td>\t</td><td>匹配一个制表符。等价于\x09和\cI。</td> 
</tr>
<tr>
  <td>\v</td><td>匹配一个垂直制表符。等价于\x0b和\cK。</td> 
</tr>
<tr>
  <td>\w</td><td>匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的"单词"字符使用Unicode字符集。</td> 
</tr>
<tr>
  <td>\W</td><td>匹配任何非单词字符。等价于“[^A-Za-z0-9_]”。</td> 
</tr>
<tr>
  <td>\xn</td><td>匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。</td> 
</tr>
<tr>
  <td>\num</td><td>匹配num，其中num是一个正整数。对所获取的匹配的引用。</td> 
</tr>
<tr>
  <td>\n</td><td>标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</td> 
</tr>
<tr>
  <td>\nm</td><td>标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。</td> 
</tr>
<tr>
  <td>\nml</td><td>如果n为八进制数字（0-7），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td> 
</tr>
<tr>
  <td>\un</td><td>匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。</td> 
</tr>

<tr>
  <td>\p{P}</td><td>小写 p 是 property 的意思，表示 Unicode 属性，用于 Unicode 正表达式的前缀。中括号内的“P”表示Unicode 字符集七个字符属性之一：<br/>标点字符。
<br/>其他六个属性：<br/>
L：字母；<br/>
M：标记符号（一般不会单独出现）；<br/>
Z：分隔符（比如空格、换行等）；<br/>
S：符号（比如数学符号、货币符号等）；<br/>
N：数字（比如阿拉伯数字、罗马数字等）；<br/>
C：其他字符。<br/><br/>
ps:部分语言不支持此语法</td> 
</tr>
<tr>
  <td>\<<br/>\></td><td>匹配词（word）的开始（\<）和结束（\>）。</td> 
</tr>
<tr>
  <td>( )</td><td>将( 和 ) 之间的表达式定义为“组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存9个），它们可以用 \1 到\9 的符号来引用。</td> 
</tr>
<tr>
  <td>|</td><td>将两个匹配条件进行逻辑“或”（Or）运算。</td> 
</tr>
</table>

<blockquote>
<p>作者：Boringboys<br>原文链接：<a href="https://www.boringboys.top/2019/05/09/正则表达式/">https://www.boringboys.top/2019/05/09/正则表达式/</a><br>版权声明：本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">BY-NC-SA</a>协议授权，转载请遵守此协议</p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>正则匹配</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言-基础知识</title>
    <url>/2019/06/11/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="汇编语言的产生"><a href="#汇编语言的产生" class="headerlink" title="汇编语言的产生"></a>汇编语言的产生</h2><h3 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h3><p>首先，我们了解一下<strong>机器语言</strong>，机器语言是机器指令的集合。  </p>
<p><strong>机器指令</strong>就是CPU可以正确执行的命令。实际上就是一列二进制数字。CPU内部将这些二进制数字转变成对应的一列高低电平，然后驱动电子器件进行运算。  </p>
<p>CPU具体的工作原理这里就不深入的说了，感情兴趣的读者可以自己搜索学习。  </p>
<a id="more"></a>

<p>我们都知道CPU是一种微处理器，对于不同的微处理器由于硬件设计和结构的不同，会需要不同的电平脉冲来驱动电子器件，进行运算。所以每种处理器都有自己的机器指令集（像x86架构的CPU和ARM架构的CPU就是拥有各自的指令集），这些指令集就是<strong>机器语言</strong>。  </p>
<p>所以，对于不同架构的CPU，可使用的机器语言也不同。</p>
<h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><p>早期的程序设计就是用的机器语言，程序员们使用 0、1 数字进行编程。机器语言过于抽象，使用机器语言实现的代码晦涩难懂、不易查错，而且难于记忆和分辨。于是就产生了<strong>汇编语言</strong>。  </p>
<p><strong>汇编语言</strong>的主体是汇编指令。汇编指令和机器指令是一一对应的，可以理解成把机器指令对应成了便于记忆的书写格式。<br>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   机器指令 1000100111011000  </span><br><span class="line">对应的  </span><br><span class="line">汇编指令 mov ax,bx  </span><br><span class="line">所表示的操作就是：将寄存器BX的内容送到AX中</span><br></pre></td></tr></table></figure>

<p>程序员可以用汇编语言编写源程序，给计算机执行时，要先用<strong>编译器</strong>将程序员写的 <em>汇编语言</em> 编译为 <em>机器码</em> ，然后才能被计算机理解并执行。</p>
<h2 id="汇编语言的组成"><a href="#汇编语言的组成" class="headerlink" title="汇编语言的组成"></a>汇编语言的组成</h2><p>汇编语言包括3类指令：  </p>
<ol>
<li>汇编指令：机器指令的助记符，对应特定的机器码  </li>
<li>伪指令：没有对应的机器码，由编译器执行，计算机不执行  </li>
<li>其他符号：由编译器识别，没有对应的机器码，如+、-、*、/等  </li>
</ol>
<p>其中，汇编指令是汇编语言的核心。  </p>
<h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><p>提供给CPU的指令和数据存放在存储器中，这里说的存储器指的是内存，与磁盘不同的是，内存中的数据是可以直接被CPU使用的。</p>
<h2 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h2><p>CPU通过<strong>地址总线</strong>来指定存储单元。  </p>
<h2 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h2><p>CPU和各种器件之间是通过<strong>数据总线</strong>来传送数据的，<em>数据总线</em>的宽度决定了CPU和其它器件之间的数据是传送速度。  </p>
<h2 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h2><p>CPU对外部器件的控制是通过<strong>控制总线</strong>实现的。控制总线是一些不同控制线的集合，有多少控制线就表示CPU提供了多少种对外部器件的控制，也就是说，<em>控制总线</em>的宽度决定了CPU对外部器件的控制能力。</p>
]]></content>
      <categories>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>广播域和冲突域</title>
    <url>/2019/05/24/%E7%BD%91%E7%BB%9C%E7%AF%87%E4%B9%8B%E5%B9%BF%E6%92%AD%E5%9F%9F%E5%92%8C%E5%86%B2%E7%AA%81%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="广播域"><a href="#广播域" class="headerlink" title="广播域"></a>广播域</h2><p>简单地说，广播域是一种环境，在该环境中通过线路发送的广播消息，可以被所有该环境中的主机或节点接收。</p>
<h2 id="冲突域"><a href="#冲突域" class="headerlink" title="冲突域"></a>冲突域</h2><p>冲突域是其中的流量可能与其他流量相冲突的网络。冲突域中所有节点都链接到同一个被交换机和学习型网桥划分的相互连接的中继器集合。</p>
<a id="more"></a>

<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>在同一个冲突域中的每一个节点都能接收到所有被发送的帧；<br>在同一个广播域中的每一个节点都能接收到任一设备发送的广播帧；  </p>
<p>冲突域是基于物理层的，所以一些处在数据链路层的设备能够划分冲突域；<br>广播域是基于数据链路层的，所以广播域只能有像路由器这样的网络层设备来划分。</p>
<blockquote>
<p>作者：Boringboys<br>原文链接：<a href="https://www.boringboys.top/2019/05/24/网络篇之广播域和冲突域/">https://www.boringboys.top/2019/05/24/网络篇之广播域和冲突域/</a><br>版权声明：本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">BY-NC-SA</a>协议授权，转载请遵守此协议</p>
</blockquote>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>广播域</tag>
        <tag>冲突域</tag>
        <tag>网络</tag>
      </tags>
  </entry>
</search>
